{"version":3,"file":"component---src-pages-index-tsx-f3d64f4c4c67b0a4d3f1.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/Seo.tsx","webpack://gatsby-starter-blog/./src/components/User/UserGreetings.tsx","webpack://gatsby-starter-blog/./src/components/UI/Divider.tsx","webpack://gatsby-starter-blog/./src/components/UI/PageButton.tsx","webpack://gatsby-starter-blog/./src/components/UI/Pagination.tsx","webpack://gatsby-starter-blog/./src/components/Blog/Articles.tsx","webpack://gatsby-starter-blog/./src/pages/index.tsx"],"sourcesContent":["import * as React from \"react\"\nimport {graphql, useStaticQuery} from \"gatsby\"\n\ninterface SeoProps {\n    title: string\n}\n\ninterface SiteMetadata {\n    title: string;\n    description: string;\n}\n\ninterface QueryResult {\n    site: {\n        siteMetadata: SiteMetadata;\n    };\n}\n\nconst Seo : React.FC<SeoProps> = ({title}) => {\n    const {site} = useStaticQuery<QueryResult>(\n        graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n          }\n        }\n      }\n    `\n    )\n\n    const metaDescription = site.siteMetadata.description\n\n    return (\n        <>\n            <title>{title}</title>\n            <meta name=\"description\" content={metaDescription}/>\n            <meta property=\"og:title\" content={title}/>\n            <meta property=\"og:description\" content={metaDescription}/>\n            <meta property=\"og:type\" content=\"website\"/>\n        </>\n    )\n}\n\nexport default Seo","import * as React from \"react\"\nimport {graphql, useStaticQuery} from \"gatsby\"\nimport {StaticImage} from \"gatsby-plugin-image\"\n\n\ninterface Author {\n    name: string,\n    linkedin: string,\n    github: string,\n    spotify: string\n}\n\ninterface SiteMetadata {\n    author: Author\n}\n\ninterface SiteData {\n    site: {\n        siteMetadata: SiteMetadata\n    }\n}\n\nconst UserGreetings: React.FC = () => {\n    const data : SiteData = useStaticQuery(graphql`\n    query IntroQuery {\n      site {\n        siteMetadata {\n          author {\n            name,\n            linkedin,\n            github,\n            spotify\n          }\n        }\n      }\n    }\n  `)\n\n    // Set these values by editing \"siteMetadata\" in gatsby-config.js\n    const author = data.site.siteMetadata?.author\n\n    return (\n        <div className=\"intro\">\n            <StaticImage\n                className=\"bio-avatar\"\n                layout=\"fixed\"\n                formats={[\"auto\", \"webp\", \"avif\"]}\n                src=\"../../images/profile-pic.jpg\"\n                width={128}\n                height={128}\n                quality={100}\n                alt=\"Profile picture\"\n            />\n            <div className=\"container\">\n                <h1 className=\"title\">Hello!<br/></h1>\n                <p className=\"subtitle\">I am <span className=\"name\">{author.name}</span></p>\n\n                <p>\n                    I am an italian <span className=\"accent\">software developer</span> based in Milan.<br/>\n                    I strongly believe in good practices and team working.\n                </p>\n\n                <p>\n                    My passion for software development dates back to my childhood, when I would spend hours tinkering\n                    with CSS\n                    and HTML to create unique themes for an online forum.\n                    This love propelled me towards a career in software development, which I officially began in 2016.\n                </p>\n\n                <p>\n                    I thrive in an environment where teamwork is appreciated and encouraged.\n                    Collaborating with others to exchange ideas, knowledge and even unwind with a refreshing beer, is\n                    what makes\n                    work meaningful and enjoyable to me.\n                </p>\n\n                <p>\n                    While writing code I always try to apply some magic tricks which will transform bad code into clean\n                    code.<br/>\n                    My passion lies in keeping things simple.\n                </p>\n\n                <p>\n                    If you are interested on my technical skills you can check my <a className=\"link\"\n                                                                                     href={author.linkedin}>LinkedIn</a> profile\n                    or follow me on <a className=\"link\" href={author.github}>Git Hub</a>.\n                </p>\n\n                <p>\n                    Although coding is a significant part of my life, I find balance in my diverse passions. <span\n                    className=\"accent\">Music</span> has always held a special place in my heart, and I eagerly explore\n                    every\n                    genre.\n                    In my free time I like being a self-taught guitar player, you can find me on <a className=\"link\"\n                                                                                                    href={author.spotify}>Spotify</a> sharing\n                    my favorite tunes.\n                    I'm also fascinated by <span className=\"accent\">photography</span> and love to capture the beauty\n                    of <span\n                    className=\"accent\">nature</span> during hikes.\n                </p>\n            </div>\n        </div>\n    )\n}\n\nexport default UserGreetings\n","import * as React from \"react\";\n\ninterface DividerProps {\n    label: string;\n}\n\nconst Divider: React.FC<DividerProps> = ({ label }) => {\n    return (\n        <div className=\"divider\">\n            <div style={{ textAlign: \"center\", fontSize: \"2em\", letterSpacing: \"30px\", margin: \"50px 0\" }}>...</div>\n            <span className=\"label\">{label}</span>\n        </div>\n    );\n};\n\nexport default Divider;\n","import * as React from \"react\";\n\ninterface PageButtonProps {\n    buttonId: number,\n    label: string,\n    buttonClass: string,\n    onButtonClick: (data: number) => void\n}\n\nconst PageButton : React.FC<PageButtonProps> = ({buttonId, label, buttonClass, onButtonClick}) => {\n\n    const handleButtonClick = (id : number) => onButtonClick(id);\n\n    return (\n        <>\n            <button key={buttonId} className={buttonClass}\n                onClick={() => handleButtonClick(buttonId)}>\n                {label}\n            </button>\n        </>\n    )\n}\n\nexport default PageButton;","import * as React from \"react\";\nimport {useState} from \"react\";\nimport PageButton from \"./PageButton\";\n\ninterface Pages {\n    pages: string[],\n    onButtonClick: (data: number) => void\n}\n\nconst Pagination : React.FC<Pages> = ({pages, onButtonClick}) => {\n    const [currentPage, setCurrentPage] = useState(0);\n\n    const handlePageChange = (page:number) => {\n        setCurrentPage(page);\n\n        onButtonClick(page);\n    }\n\n    return (\n        <>\n            <div className=\"blog-pagination\">\n                {pages.map((v, i) => {\n                    return (\n                        <PageButton\n                            key={i}\n                            buttonId={i}\n                            buttonClass={i === currentPage ? 'selected' : ''}\n                            label={(i + 1).toString()}\n                            onButtonClick={handlePageChange}\n                        ></PageButton>\n                    );\n                })}\n            </div>\n        </>\n    )\n}\n\nexport default Pagination;","import * as React from \"react\";\nimport {useState} from \"react\";\nimport {Link} from \"gatsby\";\nimport Pagination from \"../UI/Pagination\";\n\ninterface FrontMatter {\n    title: string,\n    date: string,\n    description: string\n}\n\ninterface Article {\n    frontmatter: FrontMatter;\n    fields: {\n        slug: string;\n    };\n    excerpt: string;\n}\n\ninterface ArticlesProps {\n    posts: Array<Article>;\n}\n\nconst Articles: React.FC<ArticlesProps> = ({posts}) => {\n    const [currentPage, setCurrentPage] = useState(0);\n\n    const maxElements = 2;\n    const paginatedPosts = [];\n\n    for (let i = 0; i < posts.length; i += maxElements) {\n        const chunk = posts.slice(i, i + maxElements);\n        paginatedPosts.push(chunk);\n    }\n\n    const handlePageChange = (page:number) => setCurrentPage(page);\n\n    return (\n        <>\n            {paginatedPosts.length === 0 ? (\n                <p>No posts found :c</p>\n            ) : (\n                <ol style={{listStyle: `none`}}>\n                    {paginatedPosts[currentPage].map(post => {\n                        const title = post.frontmatter.title || post.fields.slug;\n\n                        return (\n                            <li key={post.fields.slug}>\n                                <article\n                                    className=\"post-list-item\"\n                                    itemScope\n                                    itemType=\"http://schema.org/Article\"\n                                >\n                                    <header>\n                                        <h2>\n                                            <Link to={post.fields.slug} itemProp=\"url\">\n                                                <span itemProp=\"headline\">{title}</span>\n                                            </Link>\n                                        </h2>\n                                        <small>{post.frontmatter.date}</small>\n                                    </header>\n                                    <section>\n                                        <p\n                                            dangerouslySetInnerHTML={{\n                                                __html: post.frontmatter.description || post.excerpt,\n                                            }}\n                                            itemProp=\"description\"\n                                        />\n                                    </section>\n                                </article>\n                            </li>\n                        );\n                    })}\n\n                    <Pagination\n                        pages={paginatedPosts.map((_, i) => i.toString())}\n                        onButtonClick={handlePageChange}/>\n                </ol>\n            )}\n        </>\n    );\n};\n\nexport default Articles;\n","import * as React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/Layout\";\nimport UserGreetings from \"../components/User/UserGreetings\";\nimport Divider from \"../components/UI/Divider\";\nimport Articles from \"../components/Blog/Articles\";\nimport Seo from \"../components/Seo\";\n\ninterface FrontMatter {\n    date: string;\n    title: string;\n    description: string;\n}\n\ninterface Article {\n    excerpt: string;\n    fields: {\n        slug: string;\n    };\n    frontmatter: FrontMatter;\n}\n\ninterface BlogIndexProps {\n    data: {\n        allMarkdownRemark: {\n            nodes: Article[];\n        };\n    };\n    location: Location; // You can use a more specific type if needed\n}\n\nconst Index: React.FC<BlogIndexProps> = ({ data, location }) => {\n    const posts = [] || data.allMarkdownRemark.nodes;\n\n    return (\n        <Layout location={location} title=\"\">\n            <UserGreetings />\n            <Divider label={\"Posts\"} />\n            <Articles posts={posts} />\n        </Layout>\n    );\n};\n\nexport default Index;\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\n\nexport const Head = () => <Seo title={\"Hello! I'm Stefano\"}/>\n\nexport const pageQuery = graphql`\n{\n    site {\n        siteMetadata {\n            title\n        }\n    }\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n        nodes {\n            excerpt\n            fields {\n                slug\n            }\n            frontmatter {\n                date(formatString: \"MMMM DD, YYYY\")\n                title\n                description\n            }\n        }\n    }\n}\n`;\n"],"names":["_ref","title","site","useStaticQuery","metaDescription","siteMetadata","description","React","name","content","property","author","_data$site$siteMetada","className","StaticImage","layout","formats","src","width","height","quality","alt","__imageData","href","linkedin","github","spotify","label","style","textAlign","fontSize","letterSpacing","margin","buttonId","buttonClass","onButtonClick","key","onClick","pages","currentPage","setCurrentPage","useState","handlePageChange","page","map","v","i","PageButton","toString","posts","paginatedPosts","length","chunk","slice","push","listStyle","post","frontmatter","fields","slug","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","excerpt","Pagination","_","data","location","Layout","UserGreetings","Divider","Articles","Head","Seo"],"sourceRoot":""}